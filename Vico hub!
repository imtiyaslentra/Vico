local Stats = game:GetService("Stats")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local Vico_Util = loadstring(game:HttpGet("https://raw.githubusercontent.com/imtiyaslentra/VICO-HELPER-V2/refs/heads/main/Nurysium%20Fek%20Collab%20With%20Vico"))()
local function getTrainingBall()
	for index, ball in workspace:WaitForChild("TrainingBalls"):GetChildren() do
		if ball:IsA("BasePart") and ball:GetAttribute("realBall") then
			return ball
		end
	end
end
local local_player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local originalParryRemote
local originalResolveParryRemote 
local vico_dataa = nil
local hit_Sound = nil
local closest_Entity = nil
local auto_parry = true
local auto_curve = false
local auto_spam = false
local training_mode = false
local anti_curve_spam_Enabled = false
local visualize_Enabled = false
local hit_sound_Enabled = false
local hit_effect_Enabled = false
local night_mode_Enabled = false
local trail_Enabled = false
local ball_trial_Enabled = false
local self_effect_Enabled = false
local kill_effect_Enabled = false
local shaders_effect_Enabled = false
local ai_Enabled = false
local auto_win = false
local tp_hit = false
local spectate_Enabled = false
local skibidi = true
local takentimestart = false
local Services = {game:GetService("AdService"),game:GetService("SocialService")}
function initializate(dataaFolder_name)
	vico_dataa = Instance.new("Folder", game:GetService("CoreGui"))
	vico_dataa.Name = dataaFolder_name
	hit_Sound = Instance.new("Sound", nurysium_dataa)
	hit_Sound.SoundId = "rbxassetid://8632670510"
	hit_Sound.Volume = 5
end
local function get_closest_entity(Object)
	task.spawn(function()
		local closest
		local max_distance = math.huge
		for index, entity in workspace.Alive:GetChildren() do
			if entity.Name ~= Players.LocalPlayer.Name then
				local distance = (Object.Position - entity.HumanoidRootPart.Position).Magnitude
				if distance < max_distance then
					closest_Entity = entity
					max_distance = distance
				end
			end
		end
		return closest_Entity
	end)
end

function resolve_parry_Remote()
    local temp_remote = game:GetService("VirtualUser"):WaitForChild("\n\n\n\n\n")
    if not temp_remote then
        print("No RemoteEvent found.") -- Debug: Tidak ada RemoteEvent
        return
    end
    if not temp_remote:IsA('RemoteEvent') then
        print("Found object is not a RemoteEvent.") -- Debug: Bukan RemoteEvent
        return
    end
    originalParryRemote = temp_remote
    print("RemoteEvent resolved successfully.") -- Debug: RemoteEvent berhasil
end

resolve_parry_Remote()
local data = {
	canParry = true,
	modeParry = nil,
	is_Spamming = false,
	parry_Range = 30,
	spam_Range = 10,  
	hit_Count = 0,
	target_Count = 0,
	hit_Time = tick(),
	ball_Warping = tick(),
	is_ball_Warping = false,
	last_target = nil,
	is_target = false,
	taken_time = 1,
	aero_taken_times = 0,
	not_target_time = tick(),
	distance_player_to_ball = 0,
	aero_find = false,
	can_spam = true,
	last_angle_degrees = 0,
	last_ball_position = Vector3.new(0,0,0),
	is_curving = false,
	telesink_start_time = nil,
	is_telesinking = false,
	pull_start_time = nil,
	is_pulled = false,
	last_ball_speed = 0,
	spam_delay = 0,
	last_check_time = 0,
}
ReplicatedStorage.Remotes.ParrySuccess.OnClientEvent:Connect(function()
	if takentimestart then
		data.taken_time = tick() - data.hit_Time
	end
	if hit_sound_Enabled then
		hit_Sound:Play()
	end
	if hit_effect_Enabled then
		local hit_effect = game:GetObjects("rbxassetid://17407244385")[1]
		hit_effect.Parent = Vico_Util.getBall()
		hit_effect:Emit(3)
		task.delay(5, function()
			hit_effect:Destroy()
		end)
	end
end)
workspace:WaitForChild("Balls").ChildRemoved:Connect(function(child)
	data.target_Count = 0
	data.taken_time = 1
	data.hit_Count = 0
	data.is_ball_Warping = false
	data.is_Spamming = false
	data.can_parry = true
	data.last_target = nil
end)
function ManualSpam()
	loadstring(game:HttpGet("https://pastebin.com/raw/KNgpQxtv"))()
end
task.defer(function()
	local self = Vico_Util.getBall()
	local Visualize = Instance.new("Part",workspace)
	Visualize.Color = Color3.new(0, 1, 1)
	Visualize.Material = Enum.Material.ForceField
	Visualize.Transparency = 0.5
	Visualize.Anchored = true
	Visualize.CanCollide = false
	Visualize.CastShadow = false
	Visualize.Shape = Enum.PartType.Ball
	Visualize.Size = Vector3.new(30,30,30)
	local Highlight = Instance.new("Highlight")
	Highlight.Parent = Visualize
	Highlight.Enabled = true
	Highlight.FillTransparency = 0
	Highlight.OutlineColor = Color3.new(1, 1, 1)
	RunService.RenderStepped:Connect(function()
		if visualize_Enabled and local_player then
			Visualize.Transparency = 0
			Visualize.Material = Enum.Material.ForceField
			Visualize.Size = Vector3.new(data.parry_Range,data.parry_Range,data.parry_Range)
			Visualize.CFrame = CFrame.new(local_player.Character.PrimaryPart.Position)
		else
			Visualize.Material = Enum.Material.ForceField
			Visualize.Transparency = 1
		end	
	end)
end)

function getClosestEntityToMouse()
	local closest = nil
	local shortestDistance = math.huge
	local mouse = game.Players.LocalPlayer:GetMouse()
	-- Ensure workspace.Alive exists
	if not workspace:FindFirstChild("Alive") then
		return nil
	end
	-- Loop through all entities
	for _, entity in pairs(workspace.Alive:GetChildren()) do
		if entity:IsA("Model") then
			local humanoidRootPart = entity:FindFirstChild("HumanoidRootPart")
			if humanoidRootPart then
				-- Convert world position to screen position
				local screenPoint = camera:WorldToViewportPoint(humanoidRootPart.Position)
				local distanceToMouse = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(mouse.X, mouse.Y)).Magnitude
				-- Check if this is the closest entity so far
				if distanceToMouse < shortestDistance then
					closest = entity
					shortestDistance = distanceToMouse
				end
			else
			end
		else
		end
	end
	-- If no closest entity is found, warn the user
	if not closest then
	else
	end
	return closest
end
local closest_Entity_To_mouse = nil
task.defer(function()
	RunService.Heartbeat:Connect(function()
		closest_Entity_To_mouse = getClosestEntityToMouse()
	end)
end)
local Takentime = tick() - data.hit_Time
RunService.Heartbeat:Connect(function()
	Takentime = tick() - data.hit_Time
end)
task.spawn(function()
	RunService:BindToRenderStep("PreAutoSpam", Enum.RenderPriority.First.Value, function() --Auto Spam
		if not auto_spam or not workspace.Alive:FindFirstChild(local_player.Name) or training_mode then
			data.target_Count = 0
			data.hit_Count = 0
			data.is_Spamming = false
			data.last_target = nil
			return
		end    
		if closest_Entity then
			if workspace.Alive:FindFirstChild(closest_Entity.Name) then
				if data.is_Spamming then
					if workspace.Alive:FindFirstChild(local_player.Name) and data.can_spam and (local_player.Character.PrimaryPart.Position - closest_Entity.HumanoidRootPart.Position).Magnitude <= data.spam_Range  then
						task.spawn(function()
							repeat
								for v = 1,25 do
									if auto_curve then
										originalParryRemote:FireServer(
											0,
											CFrame.new(camera.CFrame.Position, Vector3.new(math.random(-1000, 1000), math.random(0, 1000), math.random(100, 1000))),
											{[closest_Entity_To_mouse.Name] = closest_Entity_To_mouse.HumanoidRootPart.Position},
											{closest_Entity_To_mouse.HumanoidRootPart.Position.X, closest_Entity_To_mouse.HumanoidRootPart.Position.Y},
											false
										)
									else
										local cf = camera.CFrame
										local x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = cf:GetComponents()
										originalParryRemote:FireServer(
											0,
											CFrame.new(x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22),
											{[closest_Entity_To_mouse.Name] = closest_Entity_To_mouse.HumanoidRootPart.Position},
											{closest_Entity_To_mouse.HumanoidRootPart.Position.X, closest_Entity_To_mouse.HumanoidRootPart.Position.Y},
											false
										)
									end
								end
								RunService.Heartbeat:Wait()
							until not data.is_Spamming or data.can_spam or (local_player.Character.PrimaryPart.Position - closest_Entity.HumanoidRootPart.Position).Magnitude > data.spam_Range or not closest_Entity or not workspace.Alive:FindFirstChild(closest_Entity.Name)
						end)
					end
				end
			end
		end
	end)
	RunService:BindToRenderStep("Auto Parry",Enum.RenderPriority.First.Value,function()
		if not auto_parry or (not workspace.Alive:FindFirstChild(local_player.Name) and not training_mode) then
			data.target_Count = 0
			data.hit_Time = tick()
			data.hit_Count = 0
			data.is_ball_Warping = false
			data.is_Spamming = false
			data.canParry = true
			data.last_target = nil
			return
		end
		local ping = Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 10
		local self
		if training_mode then
			self = getTrainingBall()
		else
			self = Vico_Util.getBall()
		end
		if not self then
			data.target_Count = 0
			data.taken_time = 1
			data.hit_Count = 0
			data.is_ball_Warping = false
			data.is_Spamming = false
			data.canParry = true
			data.last_target = nil
			return
		end
		self:GetAttributeChangedSignal('target'):Once(function()
			data.canParry = true
		end)
		if self:GetAttribute('target') == local_player.Name and skibidi then
			data.target_Count = data.target_Count + 1
			skibidi = false
		elseif self:GetAttribute('target') ~= local_player.Name then
			skibidi = true
		end
		task.delay(0.2 + (ping / 100),function()
			data.target_Count = data.target_Count - 1
		end)
		self:GetAttributeChangedSignal('from'):Once(function()
			data.last_target = workspace.Alive:FindFirstChild(self:GetAttribute('from'))
		end)
		get_closest_entity(local_player.Character.PrimaryPart)
		local player_Position = local_player.Character.PrimaryPart.Position
		local ball_Position = self.Position
		local ball_Velocity = self.AssemblyLinearVelocity
		if self:FindFirstChild("zoomies") then
			ball_Velocity = self.zoomies.VectorVelocity
		end
		local ball_Direction = (local_player.Character.PrimaryPart.Position - ball_Position).Unit
		local ball_Distance = (local_player.Character.PrimaryPart.Position - ball_Position).Magnitude
		local target_ball_distance = (closest_Entity.HumanoidRootPart.Position - ball_Position).Magnitude
		data.distance_player_to_ball = ball_Distance
		local ball_DirectionNew
		local ball_DistanceNew
		local targetPosition = (self:GetAttribute('target') == local_player.Name and local_player.Character.PrimaryPart.Position or closest_Entity.HumanoidRootPart.Position)
		ball_DirectionNew = (targetPosition - ball_Position).Unit
		ball_DistanceNew = (targetPosition - ball_Position).Magnitude
		local ball_Dot = ball_Direction:Dot(ball_Velocity.Unit)
		ball_Dot = math.clamp(ball_Dot, -1, 1)
		local ball_Dot_New = ball_DirectionNew:Dot(ball_Velocity.Unit)
		local ball_Speed = ball_Velocity.Magnitude
		local player_Position = local_player.Character.PrimaryPart.Position
		local player_Dir = (local_player.Character.PrimaryPart.Position - closest_Entity.HumanoidRootPart.Position).Unit
		local player_Velocity = local_player.Character.HumanoidRootPart.AssemblyLinearVelocity
		local player_isMoving = player_Velocity.Magnitude > 0
		local player_dot = player_isMoving and math.max(player_Dir:Dot(player_Velocity.Unit), 0)
		local ball_speed_Limited = math.min(ball_Speed / 1000, 0.1)
		local ball_predicted_Distance = (ball_Distance - ping / 15.5) - (ball_Speed / 3.5)
		local ball_predicted_Distance_target = (target_ball_distance - ping / 15.5) - (ball_Speed / 3.5)
		local predictionTime = 0.25 + (ping / 100)
		local ball_PredictedPosition = ball_Position + (ball_Velocity * predictionTime)
		local ball_PredictedDistance = (local_player.Character.PrimaryPart.Position - ball_PredictedPosition).Magnitude 
		local target_Position = closest_Entity.HumanoidRootPart.Position
		local target_Distance = local_player:DistanceFromCharacter(target_Position)
		local closest_target_Distance = local_player:DistanceFromCharacter(closest_Entity.HumanoidRootPart.Position)
		local target_distance_Limited = math.min(target_Distance / 10000, 0.1)
		local target_Direction = (local_player.Character.PrimaryPart.Position - closest_Entity.HumanoidRootPart.Position).Unit
		local target_Ball_Distance = (targetPosition - ball_Position).Magnitude
		local target_Velocity = closest_Entity.HumanoidRootPart.AssemblyLinearVelocity
		local target_isMoving = target_Velocity.Magnitude > 0
		local target_Dot = target_isMoving and math.max(target_Direction:Dot(target_Velocity.Unit), 0)
		local baseMoveAmount = 0.5
		local moveAmount = baseMoveAmount * (1 / (closest_target_Distance + 0.01)) * 1000
		local maxDistance = 1000
		local moveAmountNew = math.max(0, math.min(0.6 * closest_target_Distance, 1))
		data.spam_delay = moveAmountNew
		data.spam_Range = math.min(moveAmount + (ball_Speed / 7.15), (150 + moveAmount)) + math.max(ping / 2, 3.5)
		local L = ball_Speed / 2000
		local time_since_last_angle_check = tick() - (data.last_check_time or 0)
		local min_time_between_checks = 0.1
		local angle_degrees = math.deg(math.acos(ball_Dot_New))
		local ball_is_target
		ball_is_target = self:GetAttribute('target') == local_player.Name
		local previous_angle_degrees = data.last_angle_degrees or angle_degrees
		local delta_angle = math.abs(previous_angle_degrees - angle_degrees)
		if target_Distance <= data.spam_Range then
			takentimestart = true
		elseif target_Distance >= data.spam_Range + 7.5 then
			takentimestart = false
			data.taken_time = 1
		end
		data.can_spam = true
		local curve = (1 - ball_Dot_New) / 2
		local num = 6.25 - (ping / 10)
		if ball_Speed >= 250 then
		num = 12.5 - (ping / 10)
		elseif ball_Speed >= 500 then
		num = 25 - (ping / 10)
		elseif ball_Speed >= 750 then
		num = 50 - (ping / 10)
		end
		if delta_angle > 31 + (ball_Speed / num) then
			data.can_spam = false
		else
			data.can_spam = true
		end
		data.last_angle_degrees = angle_degrees
		data.last_check_time = tick()
		local speedFactor = 3.3
		local speedFactorPingBased = 7.15
		if ball_Speed >= 750 then
			speedFactor = 2.55
		end
		data.parry_Range = math.max(math.max(ping / 2, 3.5) + ball_Speed / speedFactor, speedFactorPingBased)
		if target_isMoving then
			data.is_Spamming = data.taken_time < (0.7 + (ping / 1000))  or (target_Distance < 12 and ball_Distance < 20) and ball_Velocity.Y > -50
		else
			data.is_Spamming = data.taken_time < (0.7 + (ping / 1000))  or (target_Distance < 13.5 and ball_Distance < 20) and ball_Velocity.Y > -50
		end
		if ball_Dot < -0.2 then
			data.ball_Warping = tick()
		end
		task.spawn(function()
			if (tick() - data.ball_Warping) >= 0.15 + target_distance_Limited - ball_speed_Limited or ball_Distance <= 10 then
				data.is_ball_Warping = false
				return
			end
			if data.last_target then
				if (ball_Position - data.last_target.HumanoidRootPart.Position).Magnitude > 35.5 or target_Distance <= 12 then
					data.is_ball_Warping = false
				end
			end
			data.is_ball_Warping = true
		end)
		if ball_Velocity.Y < -200 and self:FindFirstChild("AeroDynamicSlash") then
			data.aero_find = true
			data.parry_Range /= 2
		else
			data.aero_find = false
		end
		if not ball_is_target or not data.canParry then
			return
		end
		local ping_based_ball_distance
		if Stats.Network.ServerStatsItem["Data Ping"]:GetValue() > 150 and ball_predicted_Distance or ball_Distance then
			ping_based_ball_distance = ball_predicted_Distance
		else
			ping_based_ball_distance = ball_Distance
		end
		if (ping_based_ball_distance <= data.parry_Range) and not data.is_ball_Warping and delta_angle < 31 and angle_degrees < 69 then		
			local cf = camera.CFrame
			local x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = cf:GetComponents()
			originalParryRemote:FireServer(
				0,
				CFrame.new(x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22),
				{[closest_Entity_To_mouse.Name] = closest_Entity_To_mouse.HumanoidRootPart.Position},
				{closest_Entity_To_mouse.HumanoidRootPart.Position.X, closest_Entity_To_mouse.HumanoidRootPart.Position.Y},
				false
			)
			data.hit_Count = data.hit_Count + 1
			task.delay(0.2 + (ping / 100), function()
				data.hit_Count = data.hit_Count - 1
			end)
			data.hit_Time = tick()
			data.canParry = false
		end
		task.spawn(function()
			repeat
				RunService.Heartbeat:Wait()
			until (tick() - data.hit_Time) >= 1
			data.canParry = true
		end)
	end)
end)

initializate("nurysium_temp")
local function optimizePerformance()
    -- Boost FPS by disabling unnecessary features and reducing settings
    game:GetService("Workspace").StreamingEnabled = true
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01 -- Lowest quality for best FPS
    game:GetService("Lighting").GlobalShadows = false -- Disable shadows
    game:GetService("Lighting").Brightness = 2 -- Adjust lighting for smoothness
    game:GetService("UserInputService").MouseDeltaSensitivity = 0.5 -- Reduce mouse lag
    setfpscap(120) -- Increase FPS cap to 120 for smoother performance
    
    -- Optimize memory usage
    local function optimizeMemoryUsage()
        local serviceMemoryLimits = {
            ['Players'] = 2048,
            ['Workspace'] = 2048,
            ['ReplicatedStorage'] = 2048,
            -- Add more services as needed
        }

        for serviceName, limit in pairs(serviceMemoryLimits) do
            local service = game:GetService(serviceName)
            if service then
                -- Assuming there is a method to set memory limit
                -- Uncomment if such a method exists
                -- service:SetMemoryLimit(limit)
            end
        end
    end
    optimizeMemoryUsage()
end

-- DrRayLib

local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()

local window = DrRayLibrary:Load("March Hub", "Light") -- Ganti nama jendela menjadi "March Hub"
local tab = window:AddTab("Main") -- Tambahkan tab baru dengan judul "Main"

-- Toggle untuk mengaktifkan Auto Parry
tab:newToggle("Auto Parry", "• Main Parry", false, function(toggleState)
    auto_parry = toggleState
end)

-- Toggle untuk Visualizer
tab:newToggle("Visualizer", "• View Part", false, function(toggleState)
    visualize_Enabled = toggleState
end)

-- Toggle untuk Auto Spam
tab:newToggle("Auto Spam", "• Main Spam", false, function(toggleState)
    auto_spam = toggleState
end)

-- Button untuk Manual Spam
tab:newButton("Manual Spam", "• Main Spam", function()
    ManualSpam() -- Panggil fungsi tanpa penugasan
end)

-- Mengatur tema jendela
local mainColor = Color3.fromRGB(10, 30, 10) -- Warna utama
local secondColor = Color3.fromRGB(50, 50, 10) -- Warna sekunder

window:SetTheme(mainColor, secondColor) -- Terapkan tema warna

-- Membuka jendela GUI
window:Open()

-- Konfigurasi ScreenGui untuk ImageButton
local ScreenGui = Instance.new("ScreenGui")
local ImageButton = Instance.new("ImageButton")
local UICorner = Instance.new("UICorner")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Konfigurasi ImageButton
ImageButton.Parent = ScreenGui
ImageButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ImageButton.BorderSizePixel = 0
ImageButton.Position = UDim2.new(0.120833337, 0, 0.0952890813, 0)
ImageButton.Size = UDim2.new(0, 50, 0, 50)
ImageButton.Image = "rbxassetid://83582647628443" -- Setel gambar menggunakan ID decal
ImageButton.Draggable = true

-- Tambahkan UICorner untuk sudut membulat
UICorner.Parent = ImageButton

-- Function to handle click event
ImageButton.MouseButton1Click:Connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.End, false, game)
end)
end
optimizePerformance()
