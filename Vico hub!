-- Load Orion Library
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()
local Window = OrionLib:MakeWindow({Name = "Autoparry System", HidePremium = false})

-- Main Tab
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Toggle Autoparry Checkbox
local AutoparryEnabled = false
MainTab:AddToggle({
    Name = "Enable Autoparry",
    Default = false,
    Callback = function(Value)
        AutoparryEnabled = Value
        if AutoparryEnabled then
            print("Autoparry is now enabled.")
        else
            print("Autoparry is now disabled.")
        end
    end
})

-- Services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")
local BallFolder = Workspace:WaitForChild("Balls")

-- Global Variables
local canParry = true
local canSpam = true
local Titan_blade = Players.LocalPlayer:WaitForChild("Backpack"):WaitForChild("TitanBlade")
local predict_parry = false
local Parry_mode = false

-- Calculate Prediction Time Function
local function calculatePredictionTime(ball)
    local playerPosition = Players.LocalPlayer.Character.HumanoidRootPart.Position
    local ballPosition = ball.Position
    local ballVelocity = ball.Velocity
    local distance = (ballPosition - playerPosition).magnitude
    local speed = ballVelocity.magnitude

    if speed > 0 then
        return distance / speed
    else
        return math.huge
    end
end

-- Parry Function
local function parry()
    if canParry then
        canParry = false
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        wait(0.1) -- Simulate the parry action
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        wait(10) -- Cooldown period
        canParry = true
    end
end

-- Check Proximity to Player Function
local function checkProximityToPlayer(ball)
    local predictionTime = calculatePredictionTime(ball)
    local ballAttributes = ball:GetAttributes()
    local target = ballAttributes.Target

    if target == Players.LocalPlayer and predictionTime < 1.5 then
        parry()
    end
end

-- Event Listener
RunService.Heartbeat:Connect(function()
    if AutoparryEnabled then
        for _, ball in pairs(BallFolder:GetChildren()) do
            if ball:IsA("Ball") then
                checkProximityToPlayer(ball)
            end
        end
    end
end)

-- Additional Functionality: Visual Feedback
local function provideVisualFeedback()
    for _, ball in pairs(BallFolder:GetChildren()) do
        if ball:IsA("Ball") then
            local ballPosition = ball.Position
            -- Create a visual indicator for the player
            local indicator = Instance.new("Part")
            indicator.Size = Vector3.new(1, 1, 1)
            indicator.Position = ballPosition + Vector3.new(0, 5, 0)
            indicator.Anchored = true
            indicator.BrickColor = BrickColor.new("Bright red")
            indicator.Parent = Workspace
            wait(1) -- Show the indicator for 1 second
            indicator:Destroy()
        end
    end
end

-- Connect visual feedback to the heartbeat
RunService.Heartbeat:Connect(provideVisualFeedback)
