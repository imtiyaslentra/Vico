
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")
local BallFolder = Workspace:WaitForChild("Balls")
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()

local player = Players.LocalPlayer
local canParry = true
local autoParryEnabled = false
local Titan_blade = false
local Predict_parry = true
local Parry_mode = "pro hard"

-- Creating UI with Orion
local Window = OrionLib:MakeWindow({
    Name = "Blade Ball AutoParry",
    HidePremium = false,
    IntroText = "Blade Ball AutoParry"
})

-- Adding Tab for AutoParry
local Tab = Window:MakeTab({
    Name = "AutoParry",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Adding Toggle for AutoParry
Tab:AddToggle({
    Name = "Toggle AutoParry",
    Default = false,
    Callback = function(Value)
        autoParryEnabled = Value
        if autoParryEnabled then
            OrionLib:MakeNotification({
                Name = "AutoParry Activated",
                Content = "AutoParry is now enabled.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        else
            OrionLib:MakeNotification({
                Name = "AutoParry Deactivated",
                Content = "AutoParry is now disabled.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

local function calculatePredictionTime(ball)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            local relativePosition = ball.Position - rootPart.Position
            local relativeVelocity = ball.Velocity

            local distance = relativePosition.Magnitude
            local speed = relativeVelocity.Magnitude

            if speed > 0 then      
                return distance / speed
            end
        end
    end
    return math.huge 
end

local function parry()
    if canParry then
        canParry = false
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
        
        OrionLib:MakeNotification({
            Name = "Parry Successful!",
            Content = "Parried the ball successfully!",
            Image = "rbxassetid://4483345998",
            Time = 5
        })

        task.delay(0.1, function()
            canParry = true
        end)
    end
end

local function checkProximityToPlayer(ball)
    local success, predictionTime = pcall(calculatePredictionTime, ball)
    if not success then
        warn("Error calculating prediction time: " .. tostring(predictionTime))
        return
    end

    local realBallAttribute = ball:GetAttribute("realBall")
    local target = ball:GetAttribute("target")

    if predictionTime and realBallAttribute and target then
        if target == player.Name then
            local ballSpeedThreshold = math.max(0.4, 0.6 - ball.Velocity.Magnitude * 0.03)

            if predictionTime <= ballSpeedThreshold then
                if autoParryEnabled then
                    parry()
                end
            end
        end
    end
end

RunService.Heartbeat:Connect(function()
    for _, ball in pairs(BallFolder:GetChildren()) do
        if ball:IsA("Part") then
            checkProximityToPlayer(ball)
        end
    end
end)

-- Displaying UI
OrionLib:Init()
