local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Membuat window utama
local Window = OrionLib:MakeWindow({
    Name = "Vico Hub",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "OrionTest",
})

-- Memanggil Init pada objek Window
if Window and type(Window.Init) == "function" then
    Window:Init()
else
    warn("Window Init function is missing!")
end

-- Notifikasi ketika GUI di-load
OrionLib:MakeNotification({
    Name = "Execution Started",
    Content = "GUI successfully loaded!",
    Image = nil,
    Time = 5
})

-- Tab utama
local Tab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483362458",
    PremiumOnly = false
})

-- SERVICES
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local vim = game:GetService("VirtualInputManager")

local ballFolder = workspace.Balls
local indicatorPart = Instance.new("Part")
indicatorPart.Size = Vector3.new(5, 5, 5)
indicatorPart.Anchored = true
indicatorPart.CanCollide = false
indicatorPart.Transparency = 1
indicatorPart.BrickColor = BrickColor.new("Bright red")
indicatorPart.Parent = workspace

local lastBallPressed = nil
local isKeyPressed = false
local autoParryActive = false -- Status untuk toggle Auto Parry
local autoSpamActive = false -- Status untuk toggle Auto Spam
local isAutoSpamNotified = false -- Menandai apakah notifikasi AutoSpam sudah ditampilkan

-- Fungsi untuk menghitung waktu prediksi hingga tabrakan
local function calculatePredictionTime(ball, player)
    if not ball or not ball:IsA("BasePart") then
        warn("Invalid ball provided.")
        return math.huge
    end
    
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local rootPart = player.Character.HumanoidRootPart
        local relativePosition = ball.Position - rootPart.Position
        local velocity = ball.Velocity + (player.Character:FindFirstChildOfClass("Humanoid") and player.Character.Humanoid.RootPart.Velocity or Vector3.new(0, 0, 0))
        
        local a = (ball.Size.magnitude / 2)
        local b = relativePosition.magnitude
        local c = math.sqrt(a * a + b * b)

        if velocity.magnitude > 0 then
            local timeToCollision = (c - a) / velocity.magnitude
            return timeToCollision
        else
            warn("Velocity is zero, unable to calculate time to collision.")
            return math.huge
        end
    else
        warn("Player character is not valid.")
    end
    
    return math.huge
end

-- Fungsi untuk memeriksa kedekatan bola dengan pemain untuk AutoParry
local function checkProximityToPlayer(ball, player)
    if not autoParryActive then return end

    local predictionTime = calculatePredictionTime(ball, player)
    local realBallAttribute = ball:GetAttribute("realBall")
    local target = ball:GetAttribute("target")

    local ballSpeedThreshold = math.max(0.31, 0.5 - ball.Velocity.magnitude * 0.01)

    if predictionTime <= ballSpeedThreshold and realBallAttribute == true and target == player.Name and not isKeyPressed then
        vim:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
        wait(0.005)
        vim:SendKeyEvent(false, Enum.KeyCode.F, false, nil)
        lastBallPressed = ball
        isKeyPressed = true
        OrionLib:MakeNotification({
            Name = "Parry Executed",
            Content = "Successfully executed parry!",
            Image = nil,
            Time = 3
        })
    elseif lastBallPressed == ball and (predictionTime > ballSpeedThreshold or realBallAttribute ~= true or target ~= player.Name) then
        isKeyPressed = false
    end
end

-- Fungsi untuk memeriksa kedekatan bola dengan pemain
local function checkBallsProximity()
    local player = players.LocalPlayer
    if not player then
        warn("Local player not found! Ensure this script is running on the client.")
        return
    end

    for _, ball in pairs(ballFolder:GetChildren()) do
        if ball:IsA("Part") then
            checkProximityToPlayer(ball, player)
        end
    end
end

runService.Heartbeat:Connect(checkBallsProximity)

-- Fungsi untuk mengecek kedekatan pemain lain untuk AutoSpam
local function checkPlayerProximityToPlayer()
    local player = players.LocalPlayer
    local playerPosition = getPlayerPosition()

    if not playerPosition then return end

    for _, otherPlayer in pairs(players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local otherPlayerPosition = otherPlayer.Character.HumanoidRootPart.Position
            local distance = (playerPosition - otherPlayerPosition).Magnitude

            if distance < 10 then
                vim:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
                wait(0.01)
                vim:SendKeyEvent(false, Enum.KeyCode.F, false, nil)

                if not isAutoSpamNotified then
                    OrionLib:MakeNotification({
                        Name = "AutoSpam Activated",
                        Content = "Spamming parry due to nearby player!",
                        Image = nil,
                        Time = 3
                    })
                    isAutoSpamNotified = true
                end

                return
            end
        end
    end

    isAutoSpamNotified = false
end

-- Fungsi toggle untuk Auto Parry
local function ToggleAutoParry()
    autoParryActive = not autoParryActive
    if autoParryActive then
        OrionLib:MakeNotification({
            Name = "Auto Parry Activated",
            Content = "Auto Parry is now active!",
            Image = nil,
            Time = 3
        })
    else
        OrionLib:MakeNotification({
            Name = "Auto Parry Deactivated",
            Content = "Auto Parry has been turned off.",
            Image = nil,
            Time = 3
        })
    end
end

-- Fungsi toggle untuk Auto Spam
local function ToggleAutoSpam()
    autoSpamActive = not autoSpamActive
    if autoSpamActive then
        OrionLib:MakeNotification({
            Name = "Auto Spam Activated",
            Content = "Auto Spam is now active!",
            Image = nil,
            Time = 3
        })

        runService.Heartbeat:Connect(checkPlayerProximityToPlayer)
    else
        OrionLib:MakeNotification({
            Name = "Auto Spam Deactivated",
            Content = "Auto Spam has been turned off.",
            Image = nil,
            Time = 3
        })
    end
end

-- Tombol Toggle Auto Parry pada tab
Tab:AddButton({
    Name = "Auto Parry",
    Callback = function()
        ToggleAutoParry()
    end
})

-- Tombol Toggle Auto Spam pada tab
Tab:AddButton({
    Name = "Auto Spam",
    Callback = function()
        ToggleAutoSpam()
    end
})

print("Script ran without errors")
