local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Blade Ball Auto Parry", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

-- Tabs
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Autoparry Toggle
local AutoParryToggle = MainTab:AddToggle({
    Name = "Auto Parry",
    Default = false,
    Callback = function(value)
        canParry = value
    end
})

-- Ping Toggle & Display
local PingDisplay = MainTab:AddLabel("Ping: 0 ms")

local function updatePing()
    local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    PingDisplay:Set("Ping: " .. ping)
end

RunService.Heartbeat:Connect(function()
    updatePing()
end)

-- Distance Visualizer Toggle
local DistanceToggle = MainTab:AddToggle({
    Name = "Visualizer",
    Default = false,
    Callback = function(value)
        canVisualize = value
    end
})

-- Function to Create Visualizer Part (Circle)
local function createVisualizerPart(position, radius)
    local visualizer = Instance.new("Part")
    visualizer.Shape = Enum.PartType.Ball
    visualizer.Size = Vector3.new(radius * 2, radius * 2, radius * 2)
    visualizer.CFrame = CFrame.new(position)
    visualizer.Anchored = true
    visualizer.CanCollide = false
    visualizer.Transparency = 0.5
    visualizer.BrickColor = BrickColor.new("Bright green")
    visualizer.Parent = Workspace
    return visualizer
end

-- Function to Update Visualizer
local function updateVisualizer(ball)
    if canVisualize then
        local character = player.Character
        if character then
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if rootPart then
                local distance = (ball.Position - rootPart.Position).Magnitude
                local visualizer = createVisualizerPart(rootPart.Position, distance)
                task.delay(0.1, function()
                    visualizer:Destroy()
                end)
            end
        end
    end
end

-- Hook to Check Proximity and Update Visualizer
RunService.Heartbeat:Connect(function()
    for _, ball in ipairs(BallFolder:GetChildren()) do
        checkProximityToPlayer(ball)
        updateVisualizer(ball)
    end
end)

-- Required Orion Library Initialization
OrionLib:Init()

-- Autoparry Logic as Provided by You
local function calculatePredictionTime(ball)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            local relativePosition = ball.Position - rootPart.Position
            local relativeVelocity = ball.Velocity

            local distance = relativePosition.Magnitude
            local speed = relativeVelocity.Magnitude

            if speed > 0 then      
                return distance / speed
            end
        end
    end
    return math.huge 
end

local function parry()
    if canParry then
        canParry = false
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
        
        task.delay(0.1, function()
            print("parried by using calculater at https://frostware.raw/caculate_bladeball.com")
            canParry = true
        end)
    end
end

local function checkProximityToPlayer(ball)
    local predictionTime = calculatePredictionTime(ball)
    local realBallAttribute = ball:GetAttribute("realBall")
    local target = ball:GetAttribute("target")

    if predictionTime and realBallAttribute and target then
        if target == player.Name then
            local ballSpeedThreshold = math.max(0.4, 0.6 - ball.Velocity.Magnitude * 0.03)

            if predictionTime <= ballSpeedThreshold then
                parry()
            end
        end
    end
end

-- Main Loop for Proximity Check
RunService.Heartbeat:Connect(function()
    for _, ball in ipairs(BallFolder:GetChildren()) do
        checkProximityToPlayer(ball)
    end
end)
