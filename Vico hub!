local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Create the main window
local Window = OrionLib:MakeWindow({
    Name = "Blade Ball",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "OrionTest",
})

-- Ensure the window is initialized
if Window and type(Window.Init) == "function" then
    Window:Init()
else
    warn("Window Init function is missing!")
end

-- Create the main tab
local Tab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483362458",
    PremiumOnly = false
})

-- Create a section within the tab
local Section = Tab:AddSection({
    Name = "Auto Parry Controls"
})

local function ToggleAutoParry(value)
    autoParryActive = value
    print("Auto Parry Active:", autoParryActive) -- Debug output
    if autoParryActive then
        OrionLib:MakeNotification({
            Name = "Auto Parry Activated",
            Content = "Auto Parry is now active!",
            Image = nil,
            Time = 3
        })
    else
        OrionLib:MakeNotification({
            Name = "Auto Parry Deactivated",
            Content = "Auto Parry has been turned off.",
            Image = nil,
            Time = 3
        })
    end
end

-- Add a toggle button to the section
Section:AddToggle({
    Name = "Toggle Auto Parry",
    Default = true,
    Callback = function(value)
        ToggleAutoParry(value)
    end
})

if Section then
    print("Section is created successfully.")
else
    warn("Section could not be created!")
end

-- Notification when GUI is loaded
OrionLib:MakeNotification({
    Name = "Execution Started",
    Content = "GUI successfully loaded!",
    Image = nil,
    Time = 5
})

-- SERVICES
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local vim = game:GetService("VirtualInputManager")

local ballFolder = workspace.Balls
local indicatorPart = Instance.new("Part")
indicatorPart.Size = Vector3.new(5, 5, 5)
indicatorPart.Anchored = true
indicatorPart.CanCollide = false
indicatorPart.Transparency = 1
indicatorPart.BrickColor = BrickColor.new("Bright red")
indicatorPart.Parent = workspace

local lastBallPressed = nil
local isKeyPressed = false
local autoParryActive = false -- Status untuk toggle Auto Parry

-- Function to calculate prediction time until collision
local function calculatePredictionTime(ball, player)
    local success, result = pcall(function()
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local relativePosition = ball.Position - rootPart.Position
            local velocity = ball.Velocity + rootPart.Velocity  -- Ganti dengan 'ball.Velocity'
            local a = (ball.Size.magnitude / 2) 
            local b = relativePosition.magnitude
            local c = math.sqrt(a * a + b * b)
            local timeToCollision = (c - a) / velocity.magnitude
            return timeToCollision
        end
        return math.huge
    end)

    if not success then
        print("Error calculating prediction time:", result)
    end
    return result or math.huge
end

-- Function to update indicator position
local function updateIndicatorPosition(ball)
    local success, result = pcall(function()
        indicatorPart.Position = ball.Position
    end)

    if not success then
        print("Error updating indicator position:", result)
    end
end

-- Update the ping calculation
local Stats = game:GetService("Stats")
local ping = Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 10
print("Ping Value:", ping) -- Debug output

-- Check proximity to player
local function checkProximityToPlayer(ball, player)
    if not autoParryActive then return end -- Hentikan fungsi jika Auto Parry tidak aktif

    local predictionTime = calculatePredictionTime(ball, player)
    local realBallAttribute = ball:GetAttribute("realBall")
    local target = ball:GetAttribute("target")

    local ballSpeedThreshold = math.max(0.31, 0.5 - ball.Velocity.magnitude * 0.01)
    
    -- Adjusted prediction time based on ping
    local adjustedPredictionTime = predictionTime + (ping / 1000) -- Adjusting prediction time based on ping
    print("Adjusted Prediction Time:", adjustedPredictionTime) -- Debug output

    if adjustedPredictionTime <= ballSpeedThreshold and realBallAttribute == true and target == player.Name and not isKeyPressed then
        local success, result = pcall(function()
            vim:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
            wait(0.005)
            vim:SendKeyEvent(false, Enum.KeyCode.F, false, nil)
            lastBallPressed = ball
            isKeyPressed = true
            OrionLib:MakeNotification({
                Name = "Parry Executed",
                Content = "Successfully executed parry!",
                Image = nil,
                Time = 3
            })
        end)

        if not success then
            print("Error executing parry:", result)
        else
            print("Parry Executed!") -- Debug output
        end
    elseif lastBallPressed == ball and (adjustedPredictionTime > ballSpeedThreshold or realBallAttribute ~= true or target ~= player.Name) then
        isKeyPressed = false
        print("Parry reset for ball:", ball) -- Debug output
    end
end

-- Function to check ball proximity
local function checkBallsProximity()
    local player = players.LocalPlayer
    if player then
        for _, ball in pairs(ballFolder:GetChildren()) do
            checkProximityToPlayer(ball, player)
            updateIndicatorPosition(ball)
        end
    end
end

runService.Heartbeat:Connect(checkBallsProximity)

print("Script ran without errors")
