local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Membuat window utama
local Window = OrionLib:MakeWindow({
    Name = "Blade Ball",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "OrionTest",
})

-- Memanggil Init pada objek Window
if Window and type(Window.Init) == "function" then
    Window:Init()
else
    warn("Window Init function is missing!")
end

-- Notifikasi ketika GUI di-load
OrionLib:MakeNotification({
    Name = "Execution Started",
    Content = "GUI successfully loaded!",
    Image = nil,
    Time = 5
})

-- Tab utama
local Tab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483362458",
    PremiumOnly = false
})

-- SERVICES
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local vim = game:GetService("VirtualInputManager")

local ballFolder = workspace.Balls
local indicatorPart = Instance.new("Part")
indicatorPart.Size = Vector3.new(5, 5, 5)
indicatorPart.Anchored = true
indicatorPart.CanCollide = false
indicatorPart.Transparency = 1
indicatorPart.BrickColor = BrickColor.new("Bright red")
indicatorPart.Parent = workspace

local lastBallPressed = nil
local isKeyPressed = false
local autoParryActive = false -- Status untuk toggle Auto Parry

-- Fungsi untuk menghitung waktu prediksi hingga tabrakan
local function calculatePredictionTime(ball, player)
    -- Pastikan karakter pemain dan HumanoidRootPart ada
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local rootPart = player.Character.HumanoidRootPart
        local relativePosition = ball.Position - rootPart.Position
        local velocity = ball.Velocity + rootPart.Velocity

        -- Tambahan Validasi kecepatan agar tidak nol (untuk menghindari pembagian nol)
        if velocity.magnitude == 0 then
            return math.huge -- Jika kecepatan nol, tidak akan ada tabrakan
        end
        
        -- Radius bola
        local ballRadius = ball.Size.magnitude / 2
        
        -- Menggunakan jarak langsung untuk perhitungan waktu ke tabrakan
        local distance = relativePosition.magnitude

        -- Jika bola sangat dekat dengan pemain, anggap sudah tabrakan
        if distance <= ballRadius then
            return 0 -- Sudah terjadi tabrakan
        end

        -- Waktu hingga tabrakan dihitung dengan lebih sederhana
        local timeToCollision = (distance - ballRadius) / velocity.magnitude

        -- Pastikan waktu prediksi tidak negatif (penanganan kasus khusus)
        if timeToCollision < 0 then
            return math.huge
        end

        return timeToCollision
    end

    -- Jika HumanoidRootPart tidak ditemukan atau karakter tidak valid, return waktu tak terbatas
    return math.huge
end

-- Fungsi untuk memperbarui posisi indikator
local ball = game.Workspace.Ball -- Mengambil referensi ke objek bola
local indicatorPart = game.Workspace.IndicatorPart -- Mengambil referensi ke objek indikator
local lastPosition = ball.Position -- Menyimpan posisi terakhir bola

local function updateIndicatorPosition()
    if ball and ball:IsA("BasePart") then
        local currentPosition = ball.Position
        -- Hanya memperbarui jika bergerak lebih dari 0.1 stud
        if (currentPosition - lastPosition).magnitude > 0.1 then 
            indicatorPart.Position = currentPosition
            lastPosition = currentPosition -- Memperbarui posisi terakhir
        end
    else
        warn("Invalid ball object.")
    end
end

-- Menghubungkan fungsi update dengan perubahan posisi bola
ball.Changed:Connect(function(property)
    if property == "Position" then
        updateIndicatorPosition()
    end
end)

-- Fungsi untuk memeriksa kedekatan bola dengan pemain
local function checkProximityToPlayer(ball, player)
    if not autoParryActive then return end -- Hentikan fungsi jika Auto Parry tidak aktif

    -- Tambahan Validasi Objek Bola dan Pemain
    if not ball or not player then return end -- Pastikan objek valid

    local predictionTime = calculatePredictionTime(ball, player)
    local realBallAttribute = ball:GetAttribute("realBall")
    local target = ball:GetAttribute("target")
    
    -- Penambahan Batas Waktu untuk Prevent Spam
    local ballSpeedThreshold = math.max(0.31, 0.5 - ball.Velocity.magnitude * 0.01)
    local currentTime = tick() -- Menyimpan waktu saat ini untuk timeout
    local timeoutDuration = 0.5 -- Durasi timeout 0.5 detik untuk menghindari spamming

    -- Tambahan Validasi Prediksi
    if predictionTime < 0 or predictionTime > 5 then return end -- Jika waktu prediksi terlalu besar atau kecil, abaikan

    -- Cegah Spam Key Press dengan timeout dan optimalisasi prediksi
    if predictionTime <= ballSpeedThreshold and realBallAttribute == true and target == player.Name and not isKeyPressed then
        vim:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
        wait(0.005)
        vim:SendKeyEvent(false, Enum.KeyCode.F, false, nil)
        lastBallPressed = ball
        isKeyPressed = true
        keyPressedTime = currentTime -- Simpan waktu saat tombol ditekan

        OrionLib:MakeNotification({
            Name = "Parry Executed",
            Content = "Successfully executed parry!",
            Image = nil,
            Time = 3
        })
    
    -- Jika bola berubah atau timeout tercapai, reset isKeyPressed
    elseif lastBallPressed == ball and (predictionTime > ballSpeedThreshold or realBallAttribute ~= true or target ~= player.Name or (currentTime - keyPressedTime > timeoutDuration)) then
        isKeyPressed = false
        lastBallPressed = nil -- Reset bola terakhir saat kondisi tidak lagi valid
    end
end

-- Fungsi untuk memeriksa kedekatan bola
local function checkBallsProximity()
    local player = players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local rootPart = player.Character.HumanoidRootPart

        for _, ball in pairs(ballFolder:GetChildren()) do
            -- Optimasi: Hanya periksa bola yang berada dalam jarak yang relevan
            local distance = (ball.Position - rootPart.Position).magnitude

            -- Proses hanya bola yang dekat dengan pemain (misalnya, jarak < 50)
            if distance <= 50 then
                checkProximityToPlayer(ball, player)
                updateIndicatorPosition(ball)
            end
        end
    end
end

runService.Heartbeat:Connect(checkBallsProximity)

-- Fungsi toggle untuk Auto Parry
local function ToggleAutoParry()
    autoParryActive = not autoParryActive
    if autoParryActive then
        OrionLib:MakeNotification({
            Name = "Auto Parry Activated",
            Content = "Auto Parry is now active!",
            Image = nil,
            Time = 3
        })
    else
        OrionLib:MakeNotification({
            Name = "Auto Parry Deactivated",
            Content = "Auto Parry has been turned off.",
            Image = nil,
            Time = 3
        })
    end
end

-- Tombol Toggle Auto Parry pada tab
Tab:AddButton({
    Name = "Toggle Auto Parry",
    Callback = function()
        ToggleAutoParry()
    end
})

print("Script ran without errors")
