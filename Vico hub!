
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")
local BallFolder = Workspace:WaitForChild("Balls")

-- Load Orion Library
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()

local player = Players.LocalPlayer
local canParry = true
local autospamEnabled = false
local autoParryEnabled = false
local ballSpeedThreshold = 10 -- Speed threshold for AutoSpam
local parryDistanceThreshold = 10 -- Maximum distance for parry
local playerInRange = false

-- Create GUI
local Window = OrionLib:MakeWindow({Name = "Blade Ball Script", HidePremium = false, IntroText = "Blade Ball", OutroText = "Thank you for using!"})

-- Toggle for AutoParry
local autoParryToggle = Window:MakeToggle({
    Name = "Enable AutoParry",
    Default = false,
    Callback = function(value)
        autoParryEnabled = value
        print("AutoParry Enabled: " .. tostring(value)) -- Debug log
    end,
})

-- Toggle for AutoSpam
local autoSpamToggle = Window:MakeToggle({
    Name = "Enable AutoSpam",
    Default = false,
    Callback = function(value)
        autospamEnabled = value
        print("AutoSpam Enabled: " .. tostring(value)) -- Debug log
    end,
})

local function calculatePredictionTime(ball)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            local relativePosition = ball.Position - rootPart.Position
            local relativeVelocity = ball.Velocity

            local distance = relativePosition.Magnitude
            local speed = relativeVelocity.Magnitude

            if speed > 0 then
                return distance / speed
            end
        end
    end
    return math.huge
end

local function parry()
    if canParry then
        canParry = false
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)

        task.delay(0.1, function()
            print("Parried successfully!")
            canParry = true
        end)
    end
end

local function checkProximityToPlayer(ball)
    local success, predictionTime = pcall(calculatePredictionTime, ball)
    if not success then
        warn("Error calculating prediction time: " .. tostring(predictionTime))
        return
    end

    local realBallAttribute = ball:GetAttribute("realBall")
    local target = ball:GetAttribute("target")
    
    if predictionTime and realBallAttribute and target then
        local distanceToBall = (ball.Position - player.Character.HumanoidRootPart.Position).Magnitude
        if target == player.Name and distanceToBall <= parryDistanceThreshold then
            local ballSpeedThreshold = math.max(0.4, 0.6 - ball.Velocity.Magnitude * 0.03)
            if predictionTime <= ballSpeedThreshold then
                parry()
            end
        end
    end
end

RunService.Heartbeat:Connect(function()
    if autoParryEnabled then
        for _, ball in ipairs(BallFolder:GetChildren()) do
            if ball:IsA("Ball") then
                checkProximityToPlayer(ball)
            end
        end
    end

    -- Check AutoSpam status
    if autospamEnabled then
        -- Implement AutoSpam logic here if needed
    end
end)

-- Set distance for detecting player proximity
RunService.Heartbeat:Connect(function()
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        for _, ball in ipairs(BallFolder:GetChildren()) do
            if ball:IsA("Ball") then
                local ballPosition = ball.Position
                local playerPosition = character.HumanoidRootPart.Position
                local distance = (ballPosition - playerPosition).Magnitude
                playerInRange = distance < parryDistanceThreshold

                if not playerInRange then
                    canParry = true -- Disable parry if out of range
                end
            end
        end
    end
end)

-- Initialize GUI
OrionLib:Init()
